package com.diyiliu.client.support.ui;

import com.diyiliu.common.util.UIHepler;
import io.netty.channel.ChannelHandlerContext;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Component;

import javax.swing.*;
import javax.swing.text.Element;
import javax.swing.text.View;
import javax.swing.text.ViewFactory;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.text.html.InlineView;
import javax.swing.text.html.ParagraphView;

/**
 * Description: ClientUI
 * Author: DIYILIU
 * Update: 2018-03-01 16:25
 */

@Component
public class ClientUI extends javax.swing.JFrame {

    private ChannelHandlerContext context;

    /**
     * Creates new form ClientUI
     */
    public ClientUI() {
        UIHepler.beautify("Nimbus");
        initComponents();

        // 修复英文换行bug
        fixEnLineBreak();

        UIHepler.setCenter(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        pnMain = new javax.swing.JPanel();
        sclPnUser = new javax.swing.JScrollPane();
        ltUser = new javax.swing.JList<>();
        sclPnContent = new javax.swing.JScrollPane();
        sclPnInput = new javax.swing.JScrollPane();
        tpContent = new javax.swing.JTextPane();
        taInput = new javax.swing.JTextArea();
        btnSend = new javax.swing.JButton();
        lbAccount = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("客户端");
        setResizable(false);

        ImageIcon icon = new ImageIcon(ClassLoader.getSystemResource("image/chat_128.png"));
        setIconImage(icon.getImage());

        sclPnUser.setBorder(null);

        ltUser.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        ltUser.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {};

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });
        sclPnUser.setViewportView(ltUser);

        sclPnContent.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        sclPnContent.setHorizontalScrollBar(null);
        sclPnContent.setViewportView(tpContent);

        sclPnInput.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        sclPnInput.setHorizontalScrollBar(null);

        taInput.setColumns(20);
        taInput.setRows(4);
        sclPnInput.setViewportView(taInput);
        // 自动换行
        taInput.setLineWrap(true);
        taInput.setWrapStyleWord(true);

        btnSend.setText("发送");
        btnSend.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSend.addActionListener((actionEvent) -> {
            String text = taInput.getText().trim();
            if (StringUtils.isNotBlank(text)) {
                String[] lines = text.split("\\r?\\n");
                // 发送数据
                for (String l: lines){
                    sendToServer(l);
                }
                taInput.setText("");
            }
        });

        javax.swing.GroupLayout pnMainLayout = new javax.swing.GroupLayout(pnMain);
        pnMain.setLayout(pnMainLayout);
        pnMainLayout.setHorizontalGroup(
                pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnMainLayout.createSequentialGroup()
                                .addComponent(sclPnUser, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(sclPnContent)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnMainLayout.createSequentialGroup()
                                                .addComponent(lbAccount)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(btnSend))
                                        .addComponent(sclPnInput, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE))
                                .addContainerGap())
        );
        pnMainLayout.setVerticalGroup(
                pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(sclPnUser)
                        .addGroup(pnMainLayout.createSequentialGroup()
                                .addComponent(sclPnContent, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sclPnInput, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnSend)
                                        .addComponent(lbAccount))
                                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(pnMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(pnMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton btnSend;
    private javax.swing.JLabel lbAccount;
    private javax.swing.JList<String> ltUser;
    private javax.swing.JPanel pnMain;
    private javax.swing.JScrollPane sclPnUser;
    private javax.swing.JScrollPane sclPnContent;
    private javax.swing.JScrollPane sclPnInput;
    private javax.swing.JTextArea taInput;
    private javax.swing.JTextPane tpContent;
    // End of variables declaration

    public void setContext(ChannelHandlerContext context) {
        this.context = context;
    }

    public JList<String> getLtUser() {
        return ltUser;
    }

    public JLabel getLbAccount() {
        return lbAccount;
    }

    public JTextPane getTpContent() {
        return tpContent;
    }

    public JScrollPane getSclPnContent() {
        return sclPnContent;
    }

    /**
     * 修复英文换行
     */
    private void fixEnLineBreak() {
        tpContent.setContentType("text/html");
        tpContent.setEditorKit(new HTMLEditorKit() {
            @Override
            public ViewFactory getViewFactory() {

                return new HTMLFactory() {
                    public View create(Element e) {
                        View v = super.create(e);
                        if (v instanceof InlineView) {
                            return new InlineView(e) {
                                public int getBreakWeight(int axis, float pos, float len) {
                                    return GoodBreakWeight;
                                }

                                public View breakView(int axis, int p0, float pos, float len) {
                                    if (axis == View.X_AXIS) {
                                        checkPainter();
                                        int p1 = getGlyphPainter().getBoundedPosition(this, p0, pos, len);
                                        if (p0 == getStartOffset() && p1 == getEndOffset()) {
                                            return this;
                                        }
                                        return createFragment(p0, p1);
                                    }
                                    return this;
                                }
                            };
                        } else if (v instanceof ParagraphView) {
                            return new ParagraphView(e) {
                                protected SizeRequirements calculateMinorAxisRequirements(int axis, SizeRequirements r) {
                                    if (r == null) {
                                        r = new SizeRequirements();
                                    }
                                    float pref = layoutPool.getPreferredSpan(axis);
                                    float min = layoutPool.getMinimumSpan(axis);
                                    // Don't include insets, Box.getXXXSpan will include them.
                                    r.minimum = (int) min;
                                    r.preferred = Math.max(r.minimum, (int) pref);
                                    r.maximum = Integer.MAX_VALUE;
                                    r.alignment = 0.5f;
                                    return r;
                                }
                            };
                        }
                        return v;
                    }
                };
            }
        });
    }

    /**
     * 发送数据到服务器
     *
     * @param message
     */
    public void sendToServer(String message) {
        String msg = "[message]^" + message + "$" + System.lineSeparator();

        context.writeAndFlush(msg);
    }
}
